//There are two kinds of configurations "common" and then specific to main class.
//We should use ConfigHelper class to access configurations.
//If configuration "kafka.topic_client_log" is selected, it is first searched if it is
//defined in specific main class configurations, if it's not found then it's returned from
//common configurations.

common{
  environment = "dev"
  localDev = true
  processFromStart = true

  //LEGACY TO DELETE
  mysql {
    server = "jdbc:mysql://10.10.100.2:3306/erpstatsdev?useUnicode=true&characterEncoding=UTF-8"
    user = "xubao"
    pass = "8xd8IiHR"
    serverLogTable = "MK_action"
  }

  kafka {
    server = "10.10.100.11:9092"
    server_localDev = "localhost:9092"
    topic {
      client = "useraction_%s"
      server = "MK-server-log_%s"
    }
    backupKafkaTopic = "mk_sparkanalysisbackup_%s" //LEGACY TO DELETE
  }

  storage{
    client = "clientlog_%s"
    server{
      payment = "payment_%s"
      refund = "refund_%s"
    }
  }

  permanentStorage = "tmp/default_%s.parquet"
  hiveStorage = "default_%s"
}



//---Legacy




MKServerLogConsumer{
  environment = "review"
  kafka{
    topic = "MK-server-log_%s"
  }
  localDev = false
  processFromStart = true
  permanentStorage_payment = "tmp/payment_%s.parquet"
  permanentStorage_refund = "tmp/refund_%s.parquet"
  hiveStorage_payment = "payment_%s"
  hiveStorage_refund = "refund_%s"
}

MKBasicMetricsConsumer{
  kafka{
    topic = "useraction_%s"
  }
  permanentStorage = "tmp/sessions_%s.parquet"
  hiveStorage = "sessions_%s"
  backupKafkaTopic = "mk_sparkanalysisbackup_%s"
}

MKTemplateConsumer{

}